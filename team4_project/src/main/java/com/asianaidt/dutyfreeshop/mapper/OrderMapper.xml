<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.asianaidt.dutyfreeshop.mapper.OrderMapper">
	<select id="getRegion" resultType="RegionDTO">
		select region_id,region_name_kor,region_name_eng,region_code
		from region
	</select>
	
	<select id="searchAirline" parameterType="AirlineDTO" resultType="AirlineDTO">
		select airline_id,airline_name,departure,arrival,depart_time
		from airline
		where departure = #{departure} and arrival = #{arrival} and to_char(depart_time,'YYYY-MM-DD') = #{departTime};
	</select>
	
	<select id="getBasketByUser" parameterType="map" resultType="hashmap">
		SELECT basket_id, b.member_id as member_id, p.product_id as product_id, amount, br.brand_name_kor, br.brand_name_eng, p.name_kor, 
			p.name_eng, image_url, original_price, nation_price, sale_rate, total_cnt,created_date, price_sum, price_sum_nation
			FROM public.basket b 
			INNER JOIN public.product p 
			ON p.product_id = b.product_id 
			INNER JOIN public.brand br 
			ON p.brand_id = br.brand_id 
			LEFT JOIN (
				select b.member_id as member_id, SUM((original_price * sale_rate* 
					(SELECT exchange_rate
						FROM exchangerate
						where exchange_unit='WON'))::int  * amount
					) as price_sum_nation
				, SUM(original_price * sale_rate * amount ) as price_sum
				FROM public.basket b 
				INNER JOIN public.product p 
				ON p.product_id = b.product_id 
				INNER JOIN public.brand br 
				ON p.brand_id = br.brand_id
				WHERE b.member_id = #{memberIdx}
			 GROUP BY b.member_id
			) ex
			ON ex.member_id = b.member_id
			left join (
				select product_id, (original_price * sale_rate * (SELECT exchange_rate
				FROM exchangerate
				where exchange_unit='WON'))::int as nation_price
			from product) as nation
			on p.product_id = nation.product_id
			WHERE b.member_id = #{memberIdx};
	</select>
	
	<select id="getUserData" parameterType="int" resultType="MemberDTO">
		SELECT member_id, id, password, name, english_first, english_last, email, phone_number, to_char(birth_date,'YYYY-MM-DD') as birth_date, role, create_date, update_date, delete_date
		FROM public.member
		where member_id = #{memberIdx};
	</select>
	
	<select id="getExchange" parameterType="string" resultType="float">
		SELECT exchange_rate
		FROM public.exchangerate
		where exchange_unit = #{exchangeUnit};
	</select>
	
	<!-- 구매기록 입력 -->
	<insert id="insertOrder" parameterType="map">
		INSERT INTO public.orderrecord(
		member_id, payment_id, product_id, amount, price_usd, price_krw, payment_date)
		VALUES (#{member_id}, #{paymentId}, #{product_id}, #{amount}, (#{original_price}*${sale_rate}*${amount})::numeric, (#{original_price}*${sale_rate}*${exchange})::numeric*${amount},now());
	</insert>
	
	<!-- 결재 입력 -->
	<select id="insertPayment" parameterType="map" resultType = "int">
		INSERT INTO public.payment(member_id, order_first_name, order_last_name, order_name, phone_number, passport_number, birth_date, email, nation, payment_date, payment_method, unique_payment_number, status, price_usd, price_krw)
		VALUES (#{memberId},#{orderFirstName}, #{orderLastName}, #{orderName}, #{phoneNumber}, #{passportNumber}, #{birthDate}::date, #{email}, #{nation}, #{paymentDate}::date, #{paymentMethod}, #{uniquePaymentNumber}, #{status}, #{priceUsd}, #{priceKrw})
		RETURNING payment_id;
	</select>
	
	<!-- 장바구니 삭제 -->
	<delete id="deleteBasket" parameterType="int">
		DELETE FROM public.basket
		WHERE basket_id = #{basketId};
	</delete>
</mapper>
